!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("uuid"),require("@angular/material"),require("@angular/core"),require("@angular/common"),require("forms-lib"),require("@angular/material/toolbar"),require("@angular/material/button")):"function"==typeof define&&define.amd?define("shared-lib",["exports","uuid","@angular/material","@angular/core","@angular/common","forms-lib","@angular/material/toolbar","@angular/material/button"],e):e(t["shared-lib"]={},t.Uuid,t.ng.material,t.ng.core,t.ng.common,t.FormsLib,t.ng.material.toolbar,t.ng.material.button)}(this,function(t,o,e,n,i,r,a,s){"use strict";var u=function(){function t(){this.idCache=[]}return t.prototype.generate=function(t){var e=!1,n="";for(n=t?o.v5(t,o.v5.URL):o.v4();!e;)this.idExists(n)||(e=!0);return n},t.prototype.cache=function(t){this.idCache.push(t)},t.prototype.release=function(t){var e=this.idCache.indexOf(t);this.idCache.splice(e,1)},t.prototype.idExists=function(t){return this.idCache.includes(t)},t.decorators=[{type:n.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[]},t.ngInjectableDef=n.defineInjectable({factory:function(){return new t},token:t,providedIn:"root"}),t}(),c=function f(t,e){this.title=t,this.message=e},l=function(){function t(t,e){this.dialogRef=t,this.data=e,this.title=e.title,this.message=e.message}return t.prototype.ngOnInit=function(){},t.prototype.onConfirm=function(){this.dialogRef.close(!0)},t.prototype.onDismiss=function(){this.dialogRef.close(!1)},t.decorators=[{type:n.Component,args:[{selector:"ui-confirm",template:'<h1 mat-dialog-title>\n  {{title}}\n</h1>\n\n<div mat-dialog-content>\n  <p>{{message}}</p>\n</div>\n\n<div mat-dialog-actions>\n  <button mat-button (click)="onDismiss()">No</button>\n  <button mat-raised-button color="primary" (click)="onConfirm()">Yes</button>\n</div>',styles:[""]}]}],t.ctorParameters=function(){return[{type:e.MatDialogRef},{type:c,decorators:[{type:n.Inject,args:[e.MAT_DIALOG_DATA]}]}]},t}(),d=function(){function t(){this.hideCols=["uuid"],this.display=[],this.datasetChange=new n.EventEmitter,this.currentChange=new n.EventEmitter,this.edit=new n.EventEmitter,this["delete"]=new n.EventEmitter}return t.prototype.ngOnInit=function(){this.setColumns()},t.prototype.sortDisabled=function(){return 0},t.prototype.setColumns=function(){var e,n=this;this.current.subscribe(function(t){return e=t}),this.headers=Object.keys(e),this.headers.forEach(function(e){var t="table-cell";n.hideCols.find(function(t){return t===e})&&(t="none"),n.display.push(t)})},t.prototype.setCurrent=function(t){this.currentChange.emit(t)},t.prototype.editRecord=function(t){this.edit.emit(t)},t.prototype.deleteRecord=function(t){this["delete"].emit(t)},t.decorators=[{type:n.Component,args:[{selector:"ui-list",template:'<ng-container *ngIf="(dataset | async) as data; else loading">\n\x3c!-- <p-table [value]="data" autoLayout="true">\n  <ng-template pTemplate="header">\n    <tr>\n      <th>Current</th>\n      <th *ngFor="let header of headers; let i = index" [ngStyle]="{\'display\': display[i]}">{{ header | titlecase}}</th>\n      <th>Edit</th>\n      <th>Delete</th>\n    </tr>\n  </ng-template>\n  <ng-template pTemplate="body" let-rowData let-record>\n    <tr>\n      <td><button title="uuid: {{record.uuid}}" (click)="setCurrent(record)" pButton type="button" icon="pi pi-check" iconPos="left" [ngClass]="{\'ui-state-active\': record.uuid === (current | async).uuid }"></button></td>\n      <td *ngFor="let field of record | keyvalue:sortDisabled; let i = index" [ngStyle]="{\'display\': display[i]}">{{ field.value }}</td>\n      <td><button (click)="editRecord(record)" pButton type="button" icon="pi pi-pencil" iconPos="left"></button></td>\n      <td><button (click)="deleteRecord(record)" pButton type="button" icon="pi pi-trash" iconPos="left"></button></td>\n    </tr>\n  </ng-template>\n</p-table> --\x3e\n</ng-container>\n<ng-template #loading>Workspace List loading...</ng-template>\n<ui-confirm></ui-confirm>  \n',styles:[".ui-icon{padding:0 14px}.ui-spacer{flex:1 1 auto}:host ::ng-deep th{text-align:left}"]}]}],t.ctorParameters=function(){return[]},t.propDecorators={dataset:[{type:n.Input}],datasetChange:[{type:n.Output}],current:[{type:n.Input}],currentChange:[{type:n.Output}],edit:[{type:n.Output}],"delete":[{type:n.Output}]},t}(),p=function(){function t(t){this.formsService=t,this["delete"]=new n.EventEmitter,this.cancel=new n.EventEmitter,this.update=new n.EventEmitter}return t.prototype.ngOnInit=function(){this.record||console.log("No record supplied!"),this.createForm()},t.prototype.ngOnChanges=function(){this.model=Object.assign({},this.record),this.create?this.submitLabel="Create":this.submitLabel="Update"},t.prototype.createForm=function(){this.form=new r.FormGroup({}),this.fields=this.formsService.getModelFields(this.model),this.options={}},t.prototype.deleteRecord=function(t){this["delete"].emit(t)},t.prototype.cancelEdit=function(t){this.cancel.emit(t)},t.prototype.updateRecord=function(t){this.update.emit(t)},t.decorators=[{type:n.Component,args:[{selector:"ui-editor",template:'<form [formGroup]="form" (ngSubmit)="updateRecord(model)">\n  <formly-form [form]="form" [fields]="fields" [options]="options" [model]="model"></formly-form>\n  <mat-toolbar>\n    <span>\n      <button mat-stroked-button type="button" *ngIf="!create" (click)="deleteRecord(model)" class="btn btn-default" icon="pi pi-check">Delete</button>\n    </span>\n    <span class="ui-spacer"></span>\n    <span>\n      <button mat-stroked-button type="button" (click)="cancelEdit(model)"  class="btn btn-default" icon="pi pi-check">Cancel</button>\n      <button mat-stroked-button type="submit" class="btn btn-default" icon="pi pi-save">{{submitLabel}}</button>\n    </span>\n  </mat-toolbar>\n</form>\n<pre>{{form.value | json}}</pre>\n'}]}],t.ctorParameters=function(){return[{type:r.FormsLibService}]},t.propDecorators={record:[{type:n.Input}],create:[{type:n.Input}],"delete":[{type:n.Output}],cancel:[{type:n.Output}],update:[{type:n.Output}]},t}(),m=function(){function t(){}return t.decorators=[{type:n.NgModule,args:[{declarations:[p,d,l],imports:[i.CommonModule,r.FormsLibModule,a.MatToolbarModule,s.MatButtonModule],exports:[p,d,l]}]}],t}();t.UuidService=u,t.UiConfirmComponent=l,t.UiListComponent=d,t.UiEditorComponent=p,t.SharedLibModule=m,t.Éµa=c,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=shared-lib.umd.min.js.map