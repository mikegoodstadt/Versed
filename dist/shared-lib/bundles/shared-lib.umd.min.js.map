{"version":3,"sources":["ng://shared-lib/lib/uuid/uuid.service.ts","ng://shared-lib/lib/ui/ui-confirm/dialog.model.ts","ng://shared-lib/lib/ui/ui-confirm/ui-confirm.component.ts","ng://shared-lib/lib/ui/ui-list/ui-list.component.ts","ng://shared-lib/lib/ui/ui-editor/ui-editor.component.ts","ng://shared-lib/lib/shared-lib.module.ts"],"names":["UuidService","this","idCache","prototype","generate","url","isUnique","tempId","url2id","URL","uuid","idExists","cache","id","push","release","index","indexOf","splice","includes","Injectable","args","providedIn","Dialog","title","message","UiConfirmComponent","dialogRef","data","ngOnInit","onConfirm","close","onDismiss","Component","selector","template","MatDialogRef","decorators","type","Inject","MAT_DIALOG_DATA","UiListComponent","hideCols","display","datasetChange","EventEmitter","currentChange","edit","delete","setColumns","sortDisabled","now","_this","current","subscribe","curr","headers","Object","keys","forEach","header","displayType","find","col","setCurrent","record","emit","editRecord","deleteRecord","Input","Output","UiEditorComponent","formsService","cancel","update","console","log","createForm","ngOnChanges","model","assign","create","submitLabel","form","FormGroup","fields","getModelFields","options","cancelEdit","updateRecord","FormsLibService","SharedLibModule","NgModule","declarations","imports","CommonModule","FormsLibModule","MatToolbarModule","MatButtonModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { v4 as uuid } from 'uuid';\nimport { v5 as url2id } from 'uuid';\nimport { Url } from 'url';\n\n/*\n * Adapted from https://stackoverflow.com/a/55365334/1667410\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UuidService {\n  public idCache: string[] = [];\n\n  constructor() {}\n\n  public generate(url?: Url): string {\n    let isUnique = false;\n    let tempId = '';\n\n    if (url) {\n      tempId = url2id(url, url2id.URL);\n    } else {\n      tempId = uuid();\n    }\n\n    while (!isUnique) {\n      if (!this.idExists(tempId)) {\n        isUnique = true;\n      }\n    }\n    // console.log(this.idCache);\n    return tempId;\n  }\n\n  public cache(id: string): void {\n    this.idCache.push(id);\n  }\n\n  public release(id: string): void {\n    const index = this.idCache.indexOf(id);\n    this.idCache.splice(index, 1);\n  }\n\n  private idExists(id: string): boolean {\n    return this.idCache.includes(id);\n  }\n\n}\n","export class Dialog {\n  constructor(\n      public title: string,\n      public message: string\n      ) {}\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\n\nimport { Dialog } from './dialog.model';\n\n@Component({\n  selector: 'ui-confirm',\n  templateUrl: './ui-confirm.component.html',\n  styleUrls: ['./ui-confirm.component.css']\n})\nexport class UiConfirmComponent implements OnInit {\n  title: string;\n  message: string;\n\n  constructor(\n    public dialogRef: MatDialogRef<UiConfirmComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: Dialog\n    ) {    // Update view with given values\n      this.title = data.title;\n      this.message = data.message;\n  }\n\n  ngOnInit() {\n  }\n\n  onConfirm(): void {\n    // Close the dialog, return true\n    this.dialogRef.close(true);\n  }\n\n  onDismiss(): void {\n    // Close the dialog, return false\n    this.dialogRef.close(false);\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Observable } from 'rxjs';\n// import { UiConfirmComponent } from '../ui-confirm/ui-confirm.component';\n\n@Component({\n  selector: 'ui-list',\n  templateUrl: './ui-list.component.html',\n  styleUrls: ['./ui-list.component.scss'],\n  // providers: [ConfirmationService]\n})\nexport class UiListComponent implements OnInit {\n  @Input() dataset: Observable<any[]>;\n  @Output() datasetChange: EventEmitter<Observable<any[]>>;\n  @Input() current: Observable<any>;\n  @Output() currentChange: EventEmitter<any>;\n  @Output() edit: EventEmitter<any>;\n  @Output() delete: EventEmitter<any>;\n\n  public headers: string[];\n  public hideCols = ['uuid'];\n  public display = [];\n\n  constructor(\n    // private confirmationService: ConfirmationService\n  ) {\n    this.datasetChange = new EventEmitter<Observable<any[]>>();\n    this.currentChange = new EventEmitter<any>();\n    this.edit = new EventEmitter<any>();\n    this.delete = new EventEmitter<any>();\n  }\n\n  public ngOnInit(): void {\n    this.setColumns();\n  }\n\n  /*\n   * https://stackoverflow.com/questions/54091011/disable-the-default-keyvalue-pipe-sort-in-angular\n   */\n  public sortDisabled(): number {\n    return 0;\n  }\n\n  public setColumns(): void {\n    let now: any;\n    this.current.subscribe(curr => now = curr);\n    this.headers = Object.keys(now);\n    this.headers.forEach(header => {\n      let displayType = 'table-cell';\n      const hidden = this.hideCols.find(col => col === header);\n      if (hidden) { displayType = 'none'; }\n      this.display.push(displayType);\n    });\n  }\n\n  public  setCurrent(record: any): void {\n    this.currentChange.emit(record);\n  }\n\n  public editRecord(record: any): void {\n    this.edit.emit(record);\n  }\n\n  public  deleteRecord(record: any): void {\n    // this.confirmationService.confirm({\n    //   message: 'Are you sure that you want to delete this record',\n    //   header: 'Delete record',\n    //   icon: 'pi pi-exclamation-triangle',\n    //   accept: () => {\n        this.delete.emit(record);\n    //   }\n    // });\n  }\n}\n","import { Component, OnInit, OnChanges, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormlyFormOptions, FormlyFieldConfig, FormsLibService } from 'forms-lib';\n\n@Component({\n  selector: 'ui-editor',\n  templateUrl: './ui-editor.component.html'\n})\nexport class UiEditorComponent implements OnInit, OnChanges {\n  @Input() record: any;\n  @Input() create: boolean;\n  @Output() delete: EventEmitter<any>;\n  @Output() cancel: EventEmitter<any>;\n  @Output() update: EventEmitter<any>;\n\n  public form: FormGroup;\n  public model: any;\n  public fields: FormlyFieldConfig[];\n  public options: FormlyFormOptions;\n  public submitLabel: string;\n\n  constructor(\n    private formsService: FormsLibService,\n    ) {\n      this.delete = new EventEmitter<any>();\n      this.cancel = new EventEmitter<any>();\n      this.update = new EventEmitter<any>();\n    }\n\n  ngOnInit() {\n    if (!this.record) { console.log('No record supplied!'); }\n    this.createForm();\n  }\n\n  ngOnChanges() {\n    this.model = Object.assign({}, this.record);\n    if (this.create) {\n      this.submitLabel = 'Create';\n      } else {\n      this.submitLabel = 'Update';\n      }\n  }\n\n  private createForm() {\n    this.form = new FormGroup({});\n    this.fields = this.formsService.getModelFields(this.model);\n    this.options = {};\n  }\n\n  public deleteRecord(model: any): void {\n    this.delete.emit(model);\n  }\n\n  public cancelEdit(model: any): void {\n    this.cancel.emit(model);\n  }\n\n  public updateRecord(model: any): void {\n    this.update.emit(model);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { UiEditorComponent } from './ui/ui-editor/ui-editor.component';\nimport { UiListComponent } from './ui/ui-list/ui-list.component';\nimport { FormsLibModule } from 'forms-lib';\n\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { UiConfirmComponent } from './ui/ui-confirm/ui-confirm.component';\n\n@NgModule({\n  declarations: [\n    UiEditorComponent,\n    UiListComponent,\n    UiConfirmComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsLibModule,\n    MatToolbarModule,\n    MatButtonModule\n  ],\n  exports: [\n    UiEditorComponent,\n    UiListComponent,\n    UiConfirmComponent\n  ]\n})\nexport class SharedLibModule { }\n"]}