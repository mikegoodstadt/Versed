{"version":3,"file":"forms-lib.js.map","sources":["ng://forms-lib/lib/schemas/field.model.ts","ng://forms-lib/lib/schemas/form-elements/uuid.ts","ng://forms-lib/lib/schemas/form-elements/title.ts","ng://forms-lib/lib/schemas/form-elements/description.ts","ng://forms-lib/lib/schemas/form-elements/category.ts","ng://forms-lib/lib/schemas/form-elements/state.ts","ng://forms-lib/lib/schemas/form-elements/layout.ts","ng://forms-lib/lib/schemas/form-elements/widgets.ts","ng://forms-lib/lib/schemas/form-elements/email.ts","ng://forms-lib/lib/schemas/form-elements/percentage.ts","ng://forms-lib/lib/forms-lib.service.ts","ng://forms-lib/lib/types/repeat-section/repeat-section.component.ts","ng://forms-lib/lib/types/input-chips/input-chips.component.ts","ng://forms-lib/lib/types/input-percentage/input-percentage.component.ts","ng://forms-lib/lib/wrappers/panel-wrapper/panel-wrapper.component.ts","ng://forms-lib/lib/wrappers/error-wrapper/error-wrapper.component.ts","ng://forms-lib/lib/helpers/validation-messages.ts","ng://forms-lib/lib/helpers/validators.ts","ng://forms-lib/lib/forms-lib.config.ts","ng://forms-lib/lib/forms-lib.module.ts"],"sourcesContent":["import { FormlyTemplateOptions } from '@ngx-formly/core';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\n\n// @dynamic\nexport class Field {\n\n  public static field(\n    type: string,\n    key: string,\n    templateOptions?: FormlyTemplateOptions,\n    options?: any\n  ): FormlyFieldConfig {\n    return {\n      type,\n      key,\n      templateOptions,\n      ...options\n    };\n  }\n\n  public static input(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {\n    return this.field('input', key, templateOptions, options);\n  }\n\n  public static email(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {\n    const defaults = {\n      type: 'email',\n      label: 'Email'\n    };\n    return this.input(key, { ...templateOptions, ...defaults }, options);\n  }\n\n  public static password(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {\n    const defaults = {\n      label: 'Password',\n      type: 'password',\n      minLength: 3,\n      required: true\n    };\n    return this.input(key, { ...templateOptions, ...defaults }, options);\n  }\n\n  public static checkbox(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {\n    const defaults = {\n      type: 'checkbox',\n      label: 'Checkbox',\n      checked: false\n    };\n    return this.input(key, { ...templateOptions, ...defaults }, options);\n  }\n\n  public static select(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {\n    return this.field('select', key, templateOptions, options);\n  }\n\n  public static textarea(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {\n    return this.field('textarea', key, templateOptions, options);\n  }\n\n  public static radio(key: string, templateOptions?: FormlyTemplateOptions, options?: any): FormlyFieldConfig {\n    return this.field('radio', key, templateOptions, options);\n  }\n\n}\n","import { Field } from '../field.model';\n\nexport const UUID = (disabled) => {\n  const templateOptions = {\n    label: 'UUID',\n    placeholder: 'Enter UUID',\n    required: true,\n    disabled: true\n  };\n\n  return {\n    ...Field.input(\n      'uuid',\n      {\n        ...templateOptions\n      }\n    )\n  };\n};\n","import { Field } from '../field.model';\n\nexport const TITLE = (disabled) => {\n  const templateOptions = {\n    label: 'Title',\n    placeholder: 'Enter Title',\n    required: true,\n    disabled: disabled\n  };\n\n  return {\n    ...Field.input(\n      'title',\n      {\n        ...templateOptions\n      }\n    )\n  };\n};\n","import { Field } from '../field.model';\n\nexport const DESCRIPTION = (disabled) => {\n  const templateOptions = {\n    label: 'Description',\n    placeholder: 'Enter Description',\n    required: true,\n    disabled: disabled\n  };\n\n  return {\n    ...Field.input(\n      'description',\n      {\n        ...templateOptions\n      }\n    )\n  };\n};\n","import { Field } from '../field.model';\n\nexport const CATEGORY = (disabled) => ({\n  ...Field.field(\n    'chips',\n    'category',\n    {\n      label: 'Category',\n      placeholder: 'Enter Category',\n      required: true,\n      disabled: disabled\n    }\n  )\n});\n","import { Field } from '../field.model';\n\nexport const STATE = (disabled) => {\n  const templateOptions = {\n    label: 'State',\n    disabled: disabled\n  };\n\n  return {\n    ...Field.checkbox(\n      'state',\n      {\n        ...templateOptions\n      }\n    )\n  };\n};\n","import { Field } from '../field.model';\n\nexport const LAYOUT = (disabled) => ({\n  ...Field.field(\n    'select',\n    'layout',\n    {\n      label: 'Layout',\n      placeholder: 'Select Layout',\n      required: true,\n      disabled: disabled\n    }\n  )\n});\n","import { Field } from '../field.model';\n\nexport const WIDGETS = (disabled) => ({\n  ...Field.field(\n    'checkbox',\n    'widgets',\n    {\n      label: 'Widgets',\n      placeholder: 'Select Widgets',\n      required: true,\n      disabled: disabled\n    }\n  )\n});\n","import { Field } from '../field.model';\n\nexport const EMAIL = (disabled) => ({\n  ...Field.email(\n    'email',\n    {\n      placeholder: 'Enter your email',\n      required: true,\n      disabled: disabled\n    }\n  )\n});\n","import { Field } from '../field.model';\n\nexport const PERCENTAGE = (disabled) => ({\n  ...Field.field(\n    'percentage',\n    'percentage',\n    {\n      label: 'Enter you percentage from 1 to 100 %',\n      description: 'Try to enter 200%',\n      disabled: disabled\n    }\n  )\n});\n","import { Injectable } from '@angular/core';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport * as ELEMENTS from './schemas/form-elements';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormsLibService {\n\n  constructor() { }\n  public getDefaultForm(): FormlyFieldConfig[] {\n    return null; // DEFAULT_FORM().template;\n  }\n\n  public getFormById(id: string, disabled = false) {\n    return null; // FORMS_VALUES(disabled)[id];\n  }\n\n  private generateCleanConfiguration(clone: object[]) {\n    return JSON.parse(JSON.stringify(clone));\n  }\n\n  public getModelFields(model: any): FormlyFieldConfig[] {\n    // for each model prop test type and generate appropriate formfield\n    const fields = Object.keys(model);\n    const fieldConfig = [];\n    for (const field of fields) {\n      const fieldFn: string = field.toUpperCase();\n      let fieldOps = {};\n      if (typeof ELEMENTS[fieldFn] === 'function') {\n        // console.log('FormsLib ELEMENTS contains: ', fieldFn);\n        fieldOps = ELEMENTS[fieldFn]();\n        fieldConfig.push(fieldOps);\n      } else {\n        console.log('FormsLib ELEMENTS does not contain field: ', field);\n      }\n    }\n    // console.log(fieldConfig);\n    return fieldConfig;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldArrayType, FormlyFormBuilder } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-repeat-section',\n  templateUrl: './repeat-section.component.html',\n  styleUrls: ['./repeat-section.component.scss']\n})\nexport class RepeatSectionComponent extends FieldArrayType {\n  constructor(builder: FormlyFormBuilder) {\n    super(builder);\n  }\n}\n","import { Component, ViewChild, OnInit, ElementRef, OnDestroy, AfterViewInit } from '@angular/core';\nimport { FieldType } from '@ngx-formly/material';\nimport {\n  MatChipInputEvent,\n  MatAutocomplete,\n  MatAutocompleteSelectedEvent\n} from '@angular/material';\nimport { Observable, Subject } from 'rxjs';\nimport { startWith, switchMap, map, tap, takeUntil } from 'rxjs/operators';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'formly-input-chips',\n  templateUrl: './input-chips.component.html',\n})\nexport class InputChipsComponent extends FieldType implements OnInit, OnDestroy, AfterViewInit {\n  onDestroy$ = new Subject<void>();\n\n  itemControl = new FormControl();\n  selectable = true;\n  removable = true;\n  addOnBlur = true;\n  separatorKeysCodes: number[] = [ENTER, COMMA];\n\n  @ViewChild('auto') matAutocomplete: MatAutocomplete;\n\n  filter: Observable<any[]>;\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.filter = this.itemControl.valueChanges.pipe(\n      takeUntil(this.onDestroy$),\n      startWith(null),\n      map((item: any | null) => item ? this._filter(item) : this._filter(''))\n    );\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    // temporary fix for https://github.com/angular/material2/issues/6728\n    (<any> this.matAutocomplete)._formField = this.formField;\n  }\n\n  ngOnDestroy(): void {\n    this.onDestroy$.next();\n    this.onDestroy$.complete();\n  }\n\n  get empty() { return this.formControl.value.length === 0; }\n\n  public add(event: MatChipInputEvent): void {\n    // Add item only when MatAutocomplete is not open\n    // To make sure this does not conflict with OptionSelected Event\n    if (!this.matAutocomplete.isOpen) {\n      const input = event.input;\n      const value = event.value;\n\n      // Add item\n      if ((value || '').trim()) {\n        this.formControl.setValue([\n          ...this.formControl.value,\n          value.trim(),\n        ]);\n      }\n\n      // Reset the input value\n      if (input) {\n        input.value = '';\n      }\n\n      this.itemControl.setValue(null);\n    }\n  }\n\n  public selected(event: MatAutocompleteSelectedEvent): void {\n    this.formControl.setValue([\n      ...this.formControl.value,\n      event.option.viewValue,\n    ]);\n\n    this.itemControl.setValue(null);\n  }\n\n  public remove(i: number): void {\n    const value = this.formControl.value;\n\n    this.formControl.setValue([\n      ...value.slice(0, i),\n      ...value.slice(i + 1, value.length)\n    ]);\n    this.formControl.markAsTouched()\n  }\n\n  private _filter(value: any): any[] {\n    if (!this.to.filter) {return [];}\n    if (!value) {return this.to.filter.slice();}\n\n    const filterValue = value.toLowerCase();\n\n    return this.to.filter.filter(\n      item => item.toLowerCase().indexOf(filterValue) === 0\n    );\n  }\n\n  onBlur() {\n    this.formControl.markAsTouched();\n    this.field.focus = false;\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-input-percentage',\n  templateUrl: './input-percentage.component.html'\n})\nexport class InputPercentageComponent extends FieldType {\n  public limitToHundred(rawValue) {\n    const value = parseInt(rawValue, 10);\n\n    if (value < 100) {\n      if (value < 10) {\n        return [/\\d/, ' %'];\n      } else {\n      return [/\\d/, /\\d/, ' %'];\n      }\n    } else {\n      return ['100 %'];\n    }\n  }\n}\n","import { Component, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FieldWrapper } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-wrapper-panel',\n  templateUrl: './panel-wrapper.component.html'\n})\nexport class PanelWrapperComponent extends FieldWrapper {\n  @ViewChild('fieldComponent', {read: ViewContainerRef}) fieldComponent: ViewContainerRef;\n}\n","import { Component, ViewChild, ViewContainerRef } from '@angular/core';\nimport { FieldWrapper } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-wrapper-error',\n  templateUrl: './error-wrapper.component.html'\n})\nexport class ErrorWrapperComponent extends FieldWrapper {\n  @ViewChild('fieldComponent', {read: ViewContainerRef}) fieldComponent: ViewContainerRef;\n}\n","export function minlengthValidationMessage(err, field) {\n  return `Should have at least ${field.templateOptions.minLength} characters`;\n}\n\nexport function maxlengthValidationMessage(err, field) {\n  return `This value should be less than ${field.templateOptions.maxLength} characters`;\n}\n\nexport function minValidationMessage(err, field) {\n  return `This value should be more than ${field.templateOptions.min}`;\n}\n\nexport function maxValidationMessage(err, field) {\n  return `This value should be less than ${field.templateOptions.max}`;\n}","export function maximumMoneyValidation(control, type) {\n  const value = control.value;\n  if (value) {\n    const unMasked = parseInt(value.replace(/\\D/g, ''));\n    if (unMasked > 10000) {\n      return { maximumMoneyValidation: 'Should be bellow 10.000' };\n    }\n  }\n  return null;\n}\n\nexport function UuidValidation(control, type) {\n  const value = control.value;\n  if (value) {\n    const uuidValid = true; // UuidService.textUuid(value);\n\n    if (!uuidValid) {\n      return { UuidValidation: 'UUID not valid' };\n    }\n  }\n  return null;\n}\n","import { ConfigOption } from '@ngx-formly/core';\n\n  import { RepeatSectionComponent } from './types/repeat-section/repeat-section.component';\n  import { InputChipsComponent } from './types/input-chips/input-chips.component';\n  import { InputPercentageComponent } from './types/input-percentage/input-percentage.component';\n  import { PanelWrapperComponent } from './wrappers/panel-wrapper/panel-wrapper.component';\n  import { ErrorWrapperComponent } from './wrappers/error-wrapper/error-wrapper.component';\n  import {\n    maxlengthValidationMessage,\n    maxValidationMessage,\n    minlengthValidationMessage,\n    minValidationMessage\n  } from './helpers/validation-messages';\n  import { maximumMoneyValidation } from './helpers/validators';\n\n  export const config: ConfigOption = {\n    types: [\n      { name: 'repeat', component: RepeatSectionComponent },\n      { name: 'chips', component: InputChipsComponent },\n      { name: 'percentage', component: InputPercentageComponent }\n    ],\n    wrappers: [\n      { name: 'panel', component: PanelWrapperComponent },\n      { name: 'error-on-top', component: ErrorWrapperComponent }\n    ],\n    validationMessages: [\n      { name: 'required', message: 'This field is required' },\n      { name: 'minlength', message: minlengthValidationMessage },\n      { name: 'maxlength', message: maxlengthValidationMessage },\n      { name: 'min', message: minValidationMessage },\n      { name: 'max', message: maxValidationMessage },\n      { name: 'maximumMoneyValidation', message: 'should be 100' }\n    ],\n    validators: [\n      { name: 'maximumMoneyValidation', validation: maximumMoneyValidation }\n    ]\n  };\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlyMaterialModule } from '@ngx-formly/material';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\n\n/** wrappers */\nimport { PanelWrapperComponent } from './wrappers/panel-wrapper/panel-wrapper.component';\nimport { ErrorWrapperComponent } from './wrappers/error-wrapper/error-wrapper.component';\n\n/** types */\nimport { RepeatSectionComponent } from './types/repeat-section/repeat-section.component';\nimport { InputChipsComponent } from './types/input-chips/input-chips.component';\nimport { InputPercentageComponent } from './types/input-percentage/input-percentage.component';\n\n/** configuration */\nimport { config } from './forms-lib.config';\n\n@NgModule({\n  declarations: [\n    PanelWrapperComponent,\n    ErrorWrapperComponent,\n    RepeatSectionComponent,\n    InputChipsComponent,\n    InputPercentageComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormlyModule.forRoot(config),\n    FormlyMaterialModule,\n    MatChipsModule,\n    MatIconModule,\n    MatAutocompleteModule\n  ],\n  exports: [\n    FormsModule,\n    ReactiveFormsModule,\n    FormlyModule,\n    FormlyMaterialModule,\n    PanelWrapperComponent,\n    ErrorWrapperComponent,\n    RepeatSectionComponent,\n    InputChipsComponent,\n    InputPercentageComponent\n  ],\n  providers: [],\n  entryComponents: []\n})\nexport class FormsLibModule { }\n"],"names":["FieldType"],"mappings":"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"}
